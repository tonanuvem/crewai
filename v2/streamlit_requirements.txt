# =============================================================================
# REQUIREMENTS.TXT
# =============================================================================

# Interface
streamlit>=1.28.0

# Multi-Agent System
crewai>=0.28.0
crewai-tools>=0.2.0

# LLM
langchain-google-genai>=1.0.0
langchain>=0.1.0

# Leitura de Arquivos
python-docx>=1.1.0
PyPDF2>=3.0.0
pypdf>=3.17.0

# Utilidades
python-dotenv>=1.0.0
pandas>=2.0.0

# =============================================================================
# ESTRUTURA DO PROJETO
# =============================================================================

projeto/
‚îÇ
‚îú‚îÄ‚îÄ .env                          # Configura√ß√µes (N√ÉO commitar!)
‚îú‚îÄ‚îÄ .gitignore                    # Ignorar .env e outros
‚îú‚îÄ‚îÄ requirements.txt              # Depend√™ncias
‚îú‚îÄ‚îÄ README.md                     # Documenta√ß√£o
‚îÇ
‚îú‚îÄ‚îÄ app_streamlit.py             # ‚Üê Interface principal
‚îú‚îÄ‚îÄ crew_development.py          # Sistema multi-agente
‚îú‚îÄ‚îÄ test_gemini_setup.py         # Script de teste
‚îÇ
‚îú‚îÄ‚îÄ uploads/                      # Arquivos uploadados (temp)
‚îú‚îÄ‚îÄ outputs/                      # Resultados gerados
‚îÇ   ‚îú‚îÄ‚îÄ markdown/
‚îÇ   ‚îú‚îÄ‚îÄ code/
‚îÇ   ‚îî‚îÄ‚îÄ reports/
‚îÇ
‚îî‚îÄ‚îÄ docs/                         # Documenta√ß√£o adicional
    ‚îú‚îÄ‚îÄ exemplos/
    ‚îî‚îÄ‚îÄ templates/

# =============================================================================
# GUIA DE USO R√ÅPIDO
# =============================================================================

## 1. INSTALA√á√ÉO

### Passo 1: Clone ou baixe o projeto
git clone seu-repositorio
cd seu-projeto

### Passo 2: Crie ambiente virtual
python -m venv venv

# Linux/Mac
source venv/bin/activate

# Windows
venv\Scripts\activate

### Passo 3: Instale depend√™ncias
pip install -r requirements.txt

### Passo 4: Configure API Key
# Crie arquivo .env
echo "GOOGLE_API_KEY=sua-chave-aqui" > .env

# Obtenha chave em: https://makersuite.google.com/app/apikey

### Passo 5: Teste a configura√ß√£o
python test_gemini_setup.py

### Passo 6: Execute o Streamlit
streamlit run app_streamlit.py

# =============================================================================
# COMO USAR A INTERFACE
# =============================================================================

## Aba 1: INPUT (üìÑ)

### Op√ß√£o A: Upload de Arquivo
1. Clique em "Browse files"
2. Selecione seu arquivo (PDF, Word, TXT)
3. Aguarde extra√ß√£o do texto
4. Revise/edite o texto extra√≠do se necess√°rio

### Op√ß√£o B: Digita√ß√£o Manual
1. Digite ou cole a descri√ß√£o do neg√≥cio
2. M√≠nimo 50 caracteres
3. Seja espec√≠fico sobre processos e regras

### Dicas para melhor resultado:
- Descreva atores (quem faz o qu√™)
- Liste regras de neg√≥cio claramente
- Inclua valores num√©ricos quando relevante
- Mencione integra√ß√µes e notifica√ß√µes

## Aba 2: EXECU√á√ÉO (üöÄ)

### Configura√ß√µes (Sidebar)
- **Modelo**: 
  - gemini-1.5-flash (r√°pido, √≥timo para maioria)
  - gemini-1.5-pro (mais poderoso, an√°lises complexas)
  
- **Temperatura**:
  - 0.0-0.3: Mais determin√≠stico
  - 0.4-0.7: Balanceado (recomendado)
  - 0.8-1.0: Mais criativo

### Execu√ß√£o
1. Certifique-se que o texto est√° carregado
2. Clique em "‚ñ∂Ô∏è Iniciar Processamento"
3. Acompanhe o progresso de cada agente:
   - üîç Domain Analyst (An√°lise)
   - üìã Product Owner (Stories)
   - üß™ QA Engineer (BDD)
   - üíª Developer (C√≥digo)
   - üîé Reviewer (Revis√£o)

### Dura√ß√£o esperada:
- Projeto pequeno: 2-5 minutos
- Projeto m√©dio: 5-15 minutos
- Projeto grande: 15-30 minutos

## Aba 3: RESULTADOS (üìä)

### Visualiza√ß√£o
- M√©tricas de execu√ß√£o
- Output completo expand√≠vel
- Se√ß√µes organizadas por agente

### Downloads dispon√≠veis
- üì• Markdown (.md) - Melhor para documenta√ß√£o
- üì• Texto (.txt) - Compatibilidade universal

### Limpar resultados
- Clique em "üóëÔ∏è Limpar Resultados" para nova execu√ß√£o

# =============================================================================
# EXEMPLOS DE ENTRADA
# =============================================================================

## Exemplo 1: Sistema de Aprova√ß√£o de Despesas

"""
Sistema de Aprova√ß√£o de Despesas Corporativas

Atores:
- Funcion√°rio
- Gestor
- Diretor Financeiro
- Sistema

Processo:
1. Funcion√°rio preenche formul√°rio de despesa
   - Valor
   - Categoria (alimenta√ß√£o, transporte, hospedagem, outros)
   - Data da despesa
   - Justificativa
   - Anexo de comprovante (obrigat√≥rio > R$ 100)

2. Sistema valida dados
   - Valor entre R$ 10 e R$ 50.000
   - Data n√£o pode ser futura
   - Comprovante anexado se valor > R$ 100

3. Roteamento autom√°tico:
   - At√© R$ 500: Aprova√ß√£o autom√°tica
   - R$ 500 - R$ 5.000: Aprova√ß√£o do Gestor direto
   - Acima R$ 5.000: Aprova√ß√£o do Diretor Financeiro

4. Aprovador recebe notifica√ß√£o por email

5. Aprovador analisa e pode:
   - Aprovar
   - Rejeitar (com justificativa)
   - Solicitar informa√ß√µes adicionais

6. Sistema registra hist√≥rico completo

Regras de Neg√≥cio:
- N√£o permitir despesas duplicadas (mesmo CPF, valor e data)
- Prazo de aprova√ß√£o: 48h √∫teis
- Ap√≥s 48h sem resposta, escalar para superior
- Despesas aprovadas s√£o enviadas para sistema de pagamento
- Funcion√°rio pode cancelar despesa antes da aprova√ß√£o
"""

## Exemplo 2: E-commerce - Carrinho de Compras

"""
Processo de Checkout - E-commerce

Contexto:
Loja online de eletr√¥nicos precisa de processo de checkout eficiente

Fluxo Principal:
1. Cliente adiciona produtos ao carrinho
2. Cliente revisa carrinho (pode alterar quantidades, remover itens)
3. Cliente inicia checkout
4. Sistema solicita endere√ßo de entrega
5. Cliente escolhe forma de entrega:
   - PAC (5-10 dias)
   - SEDEX (2-3 dias)
   - Retirada na loja (mesmo dia)
6. Cliente escolhe forma de pagamento:
   - Cart√£o de cr√©dito (at√© 12x)
   - PIX (5% desconto)
   - Boleto (√† vista)
7. Sistema processa pagamento
8. Sistema envia confirma√ß√£o por email
9. Pedido segue para separa√ß√£o

Regras de Neg√≥cio:
- Estoque reservado por 15 minutos durante checkout
- Frete gr√°tis acima de R$ 500
- CEPs inv√°lidos devem ser rejeitados
- Limite de 10 unidades por produto
- Cupons de desconto acumulam com desconto PIX
- Validar se cart√£o n√£o est√° expirado
"""

## Exemplo 3: Sistema de Agendamento M√©dico

"""
Agendamento de Consultas Online

Processo:
1. Paciente acessa sistema de agendamento
2. Escolhe especialidade m√©dica
3. Sistema mostra m√©dicos dispon√≠veis
4. Paciente escolhe m√©dico
5. Sistema mostra hor√°rios livres
6. Paciente seleciona data/hora
7. Sistema solicita confirma√ß√£o
8. Sistema envia confirma√ß√£o por email e SMS
9. M√©dico recebe notifica√ß√£o

Regras:
- Consultas com m√≠nimo 24h de anteced√™ncia
- Paciente pode remarcar at√© 2h antes
- Cancelamento at√© 4h antes (sem cobran√ßa)
- Cancelamento com menos de 4h: cobran√ßa de multa
- M√°ximo 3 consultas agendadas por paciente
- Intervalo de 30min entre consultas do mesmo m√©dico
- Bloquear hor√°rio de almo√ßo (12h-13h)
- Permitir agendamento apenas em dias √∫teis
"""

# =============================================================================
# TROUBLESHOOTING COMUM
# =============================================================================

## Problema 1: Erro ao extrair texto do PDF
Solu√ß√£o:
- Certifique-se que o PDF n√£o est√° protegido por senha
- Tente converter PDF para Word primeiro
- Verifique se o PDF cont√©m texto (n√£o apenas imagens)

## Problema 2: "API key not valid"
Solu√ß√£o:
1. Verifique arquivo .env
2. Chave deve estar sem espa√ßos: GOOGLE_API_KEY=AIza...
3. Gere nova chave em: https://makersuite.google.com/app/apikey
4. Reinicie o Streamlit

## Problema 3: Processamento muito lento
Solu√ß√£o:
- Use gemini-1.5-flash em vez de pro
- Reduza temperatura para 0.5
- Simplifique a descri√ß√£o do neg√≥cio
- Divida em m√∫ltiplas execu√ß√µes menores

## Problema 4: "Resource exhausted" (Rate Limit)
Solu√ß√£o:
- Aguarde 60 segundos
- Use gemini-1.5-flash (limite maior: 15/min)
- Para gemini-1.5-pro: m√°ximo 2 requests/minuto

## Problema 5: Resultado n√£o atende expectativas
Solu√ß√£o:
- Seja mais espec√≠fico na descri√ß√£o
- Inclua exemplos concretos
- Liste regras de neg√≥cio explicitamente
- Aumente temperatura para 0.8-0.9
- Use gemini-1.5-pro para melhor qualidade

## Problema 6: Erro ao ler arquivo Word
Solu√ß√£o:
pip install --upgrade python-docx
- Certifique-se que √© .docx (n√£o .doc)
- Tente salvar novamente como .docx

# =============================================================================
# DICAS DE OTIMIZA√á√ÉO
# =============================================================================

## Para Resultados Mais R√°pidos:
1. Use gemini-1.5-flash
2. Temperature = 0.5
3. Descri√ß√µes concisas (500-1000 palavras)
4. Foco em 1-3 features por vez

## Para Melhor Qualidade:
1. Use gemini-1.5-pro
2. Temperature = 0.7-0.8
3. Descri√ß√µes detalhadas com exemplos
4. Inclua casos de edge e exce√ß√µes

## Para Melhor Custo-Benef√≠cio:
1. Use gemini-1.5-flash para primeira vers√£o
2. Revise resultado
3. Refine descri√ß√£o se necess√°rio
4. Execute novamente com ajustes

# =============================================================================
# ADVANCED: PERSONALIZA√á√ÉO
# =============================================================================

## Adicionar Novos Tipos de Arquivo

No app_streamlit.py, adicione:

```python
def read_excel_file(file) -> str:
    """L√™ arquivo Excel"""
    import pandas as pd
    df = pd.read_excel(file)
    return df.to_string()

# Adicione no file_uploader:
uploaded_file = st.file_uploader(
    "Upload de Documento",
    type=['pdf', 'docx', 'txt', 'xlsx', 'csv']  # ‚Üê adicione aqui
)
```

## Customizar Agentes

Edite as descri√ß√µes dos agentes em create_agents():

```python
domain_analyst = Agent(
    role="Analista de Dom√≠nio Especialista",
    goal="SEU OBJETIVO CUSTOMIZADO",
    backstory="""SUA HIST√ìRIA CUSTOMIZADA""",
    llm=llm,
    verbose=True
)
```

## Adicionar Novos Agentes

```python
# Exemplo: Agente de Documenta√ß√£o
documentation_writer = Agent(
    role="Technical Writer",
    goal="Criar documenta√ß√£o completa da API",
    backstory="Expert em documenta√ß√£o t√©cnica...",
    llm=llm,
    verbose=True
)

# Adicione task correspondente
task_doc = Task(
    description="Criar documenta√ß√£o README e API docs",
    agent=documentation_writer,
    expected_output="Documenta√ß√£o completa",
    context=[task5]  # Depois da revis√£o
)
```

## Salvar Resultados Automaticamente

Adicione ap√≥s kickoff():

```python
# Criar diret√≥rio se n√£o existe
output_dir = Path("outputs")
output_dir.mkdir(exist_ok=True)

# Salvar resultado
timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
with open(output_dir / f"resultado_{timestamp}.md", "w") as f:
    f.write(str(result))
```

# =============================================================================
# DEPLOYMENT (OPCIONAL)
# =============================================================================

## Op√ß√£o 1: Streamlit Cloud (GR√ÅTIS)

1. Suba seu c√≥digo para GitHub
2. Acesse: https://streamlit.io/cloud
3. Conecte seu reposit√≥rio
4. Configure secrets (API Keys)
5. Deploy autom√°tico!

## Op√ß√£o 2: Docker

Crie Dockerfile:

```dockerfile
FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install -r requirements.txt

COPY . .

EXPOSE 8501

CMD ["streamlit", "run", "app_streamlit.py", "--server.port=8501"]
```

Build e run:
```bash
docker build -t bdd-multiagent .
docker run -p 8501:8501 --env-file .env bdd-multiagent
```

## Op√ß√£o 3: Heroku

```bash
# Criar Procfile
echo "web: streamlit run app_streamlit.py --server.port=$PORT" > Procfile

# Deploy
heroku create meu-app-bdd
git push heroku main
heroku config:set GOOGLE_API_KEY=sua-chave
```

# =============================================================================
# SEGURAN√áA E BOAS PR√ÅTICAS
# =============================================================================

## .gitignore essencial

```
# Ambiente
.env
venv/
__pycache__/

# Uploads tempor√°rios
uploads/
*.pdf
*.docx

# Outputs
outputs/

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db
```

## Valida√ß√£o de Input

```python
# Adicione valida√ß√µes
if len(business_description) > 50000:
    st.error("Descri√ß√£o muito longa! M√°ximo 50.000 caracteres")
    st.stop()

if "senha" in business_description.lower():
    st.warning("Evite incluir informa√ß√µes sens√≠veis!")
```

## Rate Limiting

```python
import time

# Controle de requisi√ß√µes
if 'last_request' in st.session_state:
    elapsed = time.time() - st.session_state.last_request
    if elapsed < 60:  # 1 minuto entre requests
        st.warning(f"Aguarde {60-elapsed:.0f}s antes da pr√≥xima execu√ß√£o")
        st.stop()

st.session_state.last_request = time.time()
```

# =============================================================================
# M√âTRICAS E MONITORAMENTO
# =============================================================================

## Adicionar Analytics

```python
import json
from datetime import datetime

def log_execution(duration, model, success):
    log_entry = {
        'timestamp': datetime.now().isoformat(),
        'duration': duration,
        'model': model,
        'success': success
    }
    
    with open('logs/executions.jsonl', 'a') as f:
        f.write(json.dumps(log_entry) + '\n')

# Use ap√≥s execu√ß√£o
log_execution(duration, model_option, True)
```

## Dashboard de M√©tricas

```python
# Nova aba para estat√≠sticas
with st.tabs(["Input", "Execu√ß√£o", "Resultados", "üìä Stats"]):
    # ... tabs anteriores ...
    
    with tab4:
        st.header("Estat√≠sticas de Uso")
        
        # Ler logs
        import pandas as pd
        logs = pd.read_json('logs/executions.jsonl', lines=True)
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Total Execu√ß√µes", len(logs))
        with col2:
            st.metric("Tempo M√©dio", f"{logs['duration'].mean():.1f}s")
        with col3:
            st.metric("Taxa Sucesso", f"{logs['success'].mean()*100:.1f}%")
        
        # Gr√°fico
        st.line_chart(logs.set_index('timestamp')['duration'])
```

# =============================================================================
# FAQ
# =============================================================================

Q: Posso usar offline?
A: N√£o, Gemini requer conex√£o com internet.

Q: Qual o custo?
A: Gemini √© gratuito at√© os limites de uso. Veja limites atuais em:
   https://ai.google.dev/pricing

Q: Posso usar outros modelos?
A: Sim! Basta trocar o ChatGoogleGenerativeAI por outro provider
   (OpenAI, Anthropic, etc)

Q: Os dados s√£o privados?
A: Dados enviados ao Gemini seguem pol√≠ticas do Google.
   Para m√°xima privacidade, use modelos locais (Ollama).

Q: Posso comercializar?
A: Sim, respeitando termos de uso do Google Gemini e CrewAI.

Q: Como contribuir?
A: Abra issues/PRs no GitHub do projeto!

# =============================================================================
# RECURSOS ADICIONAIS
# =============================================================================

üìö Documenta√ß√£o:
- CrewAI: https://docs.crewai.com
- Streamlit: https://docs.streamlit.io
- Gemini: https://ai.google.dev/docs
- LangChain: https://python.langchain.com

üé• Tutoriais:
- Domain Storytelling: https://domainstorytelling.org
- BDD com Gherkin: https://cucumber.io/docs/gherkin
- Clean Architecture: https://blog.cleancoder.com

üí¨ Comunidades:
- CrewAI Discord: https://discord.gg/crewai
- Streamlit Forum: https://discuss.streamlit.io

# =============================================================================
# CHANGELOG
# =============================================================================

v1.0.0 (atual)
- Interface Streamlit completa
- Suporte PDF, Word, TXT
- Integra√ß√£o Gemini 1.5
- 5 agentes especializados
- Sistema de download de resultados

Pr√≥ximas features planejadas:
- [ ] Suporte Excel/CSV
- [ ] M√∫ltiplos projetos simult√¢neos
- [ ] Templates pr√©-configurados
- [ ] Integra√ß√£o com GitHub
- [ ] Export para Jira/Azure DevOps
- [ ] Modo colaborativo (m√∫ltiplos usu√°rios)
- [ ] API REST para integra√ß√£o

# =============================================================================
# SUPORTE
# =============================================================================

üêõ Encontrou um bug?
- Abra uma issue no GitHub

üí° Tem uma sugest√£o?
- Compartilhe nas discussions

üìß Precisa de ajuda?
- Verifique FAQ acima
- Consulte documenta√ß√£o
- Entre em contato via GitHub

---
Desenvolvido com ‚ù§Ô∏è usando CrewAI + Gemini + Streamlit